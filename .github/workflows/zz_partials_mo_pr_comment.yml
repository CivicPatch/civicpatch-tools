name: ZZ. partial

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'The pull request number'
        required: true
        type: number
      head_sha:
        description: 'The SHA of the head commit of the PR'
        required: true
        type: string
      head_ref:
        description: 'The head ref (branch name) of the PR'
        required: true
        type: string
    secrets:
      GH_APP_BOT_PIPELINE_APP_ID:
        required: true
      GH_APP_BOT_PIPELINE_PRIVATE_KEY:
        required: true
      GH_APP_BOT_APPROVE_APP_ID:
        required: true
      GH_APP_BOT_APPROVE_PRIVATE_KEY:
        required: true

permissions:
  contents: read # For checkout
  pull-requests: write # For commenting and approving

jobs:
  comment-and-maybe-approve:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.head_sha }} # Checkout the specific commit

      - name: Set up Go 
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.4
          cache-dependency-path: |
            civpatch_cli/go.sum

      - name: Build go task
        run: |
          cd ./civpatch_cli
          go build -o bin/cli

      - name: Generate GitHub App Pipeline Token
        id: generate-pipeline-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_PIPELINE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_PIPELINE_PRIVATE_KEY }}

      - name: Generate GitHub App Approve Token
        id: generate-approve-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_APPROVE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_APPROVE_PRIVATE_KEY }}

      - name: Extract State and GEOID from Branch Name
        id: extract-vars
        run: |
          BRANCH_NAME="${{ inputs.head_ref }}"
          STATE=$(echo "$BRANCH_NAME" | awk -F'-' '{print $4}')
          GEOID=$(echo "$BRANCH_NAME" | awk -F'-' '{print $(NF-1)}')

          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT # Use output instead of env
          echo "STATE=$STATE" >> $GITHUB_OUTPUT
          echo "GEOID=$GEOID" >> $GITHUB_OUTPUT

      - name: Comment on PR
        env:
          GITHUB_TOKEN: ${{ steps.generate-pipeline-token.outputs.token }}
          GITHUB_USERNAME: civic-patch-pipeline-bot
        run: |
          STATE=${{ steps.extract-vars.outputs.STATE }}
          GEOID=${{ steps.extract-vars.outputs.GEOID }}
          BRANCH_NAME=${{ steps.extract-vars.outputs.BRANCH_NAME }}
          PR_NUMBER=${{ inputs.pr_number }}
          COMMAND="/app/civpatch/lib/tasks/scripts/pull_request_comment.sh $STATE $GEOID $PR_NUMBER"

          ./civpatch_cli/bin/cli run-task -branch-name $BRANCH_NAME -command "$COMMAND"

      - name: Approve PR if Validated
        env:
          GITHUB_USERNAME: civic-patch-approve-bot
          GITHUB_TOKEN: ${{ steps.generate-approve-token.outputs.token }}
        run: |
          STATE=${{ steps.extract-vars.outputs.STATE }}
          GEOID=${{ steps.extract-vars.outputs.GEOID }}
          BRANCH_NAME=${{ steps.extract-vars.outputs.BRANCH_NAME }}
          PR_NUMBER=${{ inputs.pr_number }}
          COMMAND="/app/civpatch/lib/tasks/scripts/pull_request_review.sh $STATE $GEOID $PR_NUMBER" 
          ./civpatch_cli/bin/cli run-task -branch-name $BRANCH_NAME -command "$COMMAND"
