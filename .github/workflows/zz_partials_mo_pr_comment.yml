name: ZZ. partial

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'The pull request number'
        required: true
        type: number
      head_sha:
        description: 'The SHA of the head commit of the PR'
        required: true
        type: string
      head_ref:
        description: 'The head ref (branch name) of the PR'
        required: true
        type: string
    secrets:
      GH_APP_BOT_PIPELINE_APP_ID:
        required: true
      GH_APP_BOT_PIPELINE_PRIVATE_KEY:
        required: true
      GH_APP_BOT_APPROVE_APP_ID:
        required: true
      GH_APP_BOT_APPROVE_PRIVATE_KEY:
        required: true

permissions:
  contents: read # For checkout
  pull-requests: write # For commenting and approving

jobs:
  comment-and-maybe-approve:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.head_sha }} # Checkout the specific commit

      - name: Set up Go 
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.4

      - name: Build go task
        run: |
          cd ./civpatch_cli
          go build -o bin/cli

      - name: Generate GitHub App Pipeline Token
        id: generate-pipeline-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_PIPELINE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_PIPELINE_PRIVATE_KEY }}

      - name: Generate GitHub App Approve Token
        id: generate-approve-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_APPROVE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_APPROVE_PRIVATE_KEY }}

      - name: Extract State and GEOID from Branch Name
        id: extract-vars # Added ID to reference outputs
        run: |
          BRANCH_NAME="${{ inputs.head_ref }}" # Use input
          STATE=$(echo "$BRANCH_NAME" | awk -F'-' '{print $4}')
          GEOID=$(echo "$BRANCH_NAME" | awk -F'-' '{print $(NF-1)}')

          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT # Use output instead of env
          echo "STATE=$STATE" >> $GITHUB_OUTPUT
          echo "GEOID=$GEOID" >> $GITHUB_OUTPUT

      - name: Comment on PR
        id: comment-step # Added ID to reference approve output
        env:
          GITHUB_TOKEN: ${{ steps.generate-pipeline-token.outputs.token }}
          PR_NUMBER: ${{ inputs.pr_number }} # Use input
          # Get vars from previous step output
          STATE: ${{ steps.extract-vars.outputs.STATE }}
          GEOID: ${{ steps.extract-vars.outputs.GEOID }}
          BRANCH_NAME: ${{ steps.extract-vars.outputs.BRANCH_NAME }}
        run: |
          echo "Running validation..."
          # Capture both stdout and stderr
          PR_DATA=$(./civpatch_cli/bin/cli run-task -state $STATE -geoid $GEOID -branch-name $BRANCH_NAME -command "github_pipeline:generate_pr_data[$STATE,$GEOID]" 2>&1)
          EXIT_CODE=$?

          echo "Command exit code: $EXIT_CODE"
          echo "Command output:"
          echo "$PR_DATA"

          # Only proceed with JSON parsing if successful
          if [ $EXIT_CODE -eq 0 ]; then
              echo "Parsing JSON output..."
              APPROVE=$(printf '%b' "$PR_DATA" | jq -r '.approve')
              SCORE=$(printf '%b' "$PR_DATA" | jq -r '.score')
              COMMENT=$(printf '%b' "$PR_DATA" | jq -r '.comment')

              echo "$COMMENT"

              # Output approve status for the next step
              echo "approve=$APPROVE" >> $GITHUB_OUTPUT

              gh pr comment $PR_NUMBER --edit-last --create-if-none --body "$COMMENT"
          else
              echo "Command failed with exit code $EXIT_CODE"
              exit 1
          fi

      - name: Approve PR if Validated
        env:
          GITHUB_TOKEN: ${{ steps.generate-approve-token.outputs.token }}
          PR_NUMBER: ${{ inputs.pr_number }} # Use input
        # Use output from comment step
        if: steps.comment-step.outputs.approve == 'true'
        run: |
          echo "Checking if PR should be approved based on previous step..."
          gh pr review $PR_NUMBER --approve --body "Approved by Bot - agreement score looks good" 
