name: Pull Request - Comment

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - '**/people.yml'
permissions:
  contents: read
  pull-requests: write

jobs:
  #validate-changes:
  #  runs-on: ubuntu-latest
  #  outputs:
  #    should-continue: ${{ steps.check-files.outputs.should-continue }}

  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
  #      with:
  #        fetch-depth: 2 # Only run workflow if latest commit is solely a config.yml change

  #    - name: Check for latest people.yml commit
  #      id: check-files
  #      run: |
  #        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
  #        PEOPLE_FILES=$(echo "$CHANGED_FILES" | grep -c "people\.yml$" || echo "0")

  #        if [[ $PEOPLE_FILES -eq 1 ]]; then
  #          echo "A people.yml file was changed, continuing"
  #          echo "should-continue=true" >> $GITHUB_OUTPUT
  #        else
  #          echo "Either multiple files were changed or no people.yml was modified, skipping"
  #          echo "Total files changed: $TOTAL_FILES"
  #          echo "People files changed: $PEOPLE_FILES"
  #          echo "Changed files:"
  #          echo "$CHANGED_FILES"
  #          echo "should-continue=false" >> $GITHUB_OUTPUT
  #        fi

  comment-and-maybe-approve:
    runs-on: ubuntu-latest
    #needs: validate-changes
    #if: needs.validate-changes.outputs.should-continue == 'true'

    steps:  
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'
          bundler-cache: true

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_PRIVATE_KEY }}

      - name: Generate GitHub App Approve Token
        id: generate-approve-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_APPROVE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_APPROVE_PRIVATE_KEY }} 

      - name: Install dependencies
        run: |
          bundle install

      - name: Extract State and GNIS ID from Branch Name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          STATE=$(echo "$BRANCH_NAME" | awk -F'-' '{print $4}')
          GNIS_ID=$(echo "$BRANCH_NAME" | awk -F'-' '{print $(NF-1)}')
 
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "STATE=$STATE" >> $GITHUB_ENV
          echo "GNIS_ID=$GNIS_ID" >> $GITHUB_ENV
   
      - name: Comment on PR
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          echo "Running validation..."
          PR_DATA=$(bundle exec rake "github_pipeline:generate_pr_data[${{ env.STATE }},${{ env.GNIS_ID }},${{ env.BRANCH_NAME }}]")
          echo "Validation response: $PR_DATA"

          # Parse JSON output
          APPROVE=$(printf %b "$PR_DATA" | jq -r '.approve')
          SCORE=$(printf %b "$PR_DATA" | jq -r '.score')
          COMMENT=$(printf %b "$PR_DATA" | jq -r '.comment')

          echo $COMMENT

          echo "APPROVE=$APPROVE" >> $GITHUB_ENV
          echo "SCORE=$SCORE" >> $GITHUB_ENV
          
          gh pr comment ${{ github.event.pull_request.number }} --edit-last --create-if-none --body "$COMMENT"

      - name: Approve PR if Validated
        env:
          GITHUB_TOKEN: ${{ steps.generate-approve-token.outputs.token }}
        run: |
          echo "Checking if PR should be approved..."
          echo "APPROVE=$APPROVE"
          if [ "$APPROVE" = "true" ]; then
            gh pr review ${{ github.event.pull_request.number }} --approve --body "Approved by Bot - agreement score looks good"
          fi
