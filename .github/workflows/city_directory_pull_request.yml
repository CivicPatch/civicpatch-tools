name: Validate City Directory

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - '**/directory.yml'
permissions:
  contents: read
  pull-requests: write

jobs: 
  comment_and_validate:
    runs-on: ubuntu-latest

    steps:  
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'
          bundler-cache: true

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
            app-id: ${{ secrets.GH_APP_BOT_APP_ID }}
            private-key: ${{ secrets.GH_APP_BOT_PRIVATE_KEY }}

      - name: Install dependencies
        run: |
          bundle install

      - name: Extract State and GNIS ID from Branch Name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          STATE=$(echo "$BRANCH_NAME" | awk -F'-' '{print $4}')
          GNIS_ID=$(echo "$BRANCH_NAME" | awk -F'-' '{print $(NF-1)}')
 
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "STATE=$STATE" >> $GITHUB_ENV
          echo "GNIS_ID=$GNIS_ID" >> $GITHUB_ENV
  
      - name: Comment on PR (Scraped Data)
        id: generate_markdown
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          SCRAPED_DATA_COMMENT=$(bundle exec rake "github_pipeline:get_pr_comment[${{ env.STATE }},${{ env.GNIS_ID }},${{ env.BRANCH_NAME }}]")
          gh pr comment ${{ github.event.pull_request.number }} --body "$SCRAPED_DATA_COMMENT"
      
      - name: Run City Directory Validation (Trusted Source)
        id: validate_trusted_source
        run: |
          echo "Running validation..."
          SOURCE_VALIDATION_RESPONSE=$(bundle exec rake "github_pipeline:validate_city_directory[${{ env.STATE }},${{ env.GNIS_ID }}]")
          echo "Validation response: $SOURCE_VALIDATION_RESPONSE"

          # Parse JSON output
          SOURCE_VALIDATION_APPROVE=$(echo "$SOURCE_VALIDATION_RESPONSE" | jq -r '.approve')
          SOURCE_VALIDATION_COMMENT=$(echo "$SOURCE_VALIDATION_RESPONSE" | jq -r '.comment')

          echo "SOURCE_VALIDATION_APPROVE=$SOURCE_VALIDATION_APPROVE" >> "$GITHUB_ENV"
          echo "SOURCE_VALIDATION_COMMENT<<EOF" >> "$GITHUB_ENV"
          echo "$SOURCE_VALIDATION_COMMENT" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      - name: Comment on PR - Validation Step (Compare Sources)
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "$SOURCE_VALIDATION_COMMENT"
      